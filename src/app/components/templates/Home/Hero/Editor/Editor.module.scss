/* --------------------------- */
/* Editor */
/* --------------------------- */

@use 'sass:map';
@use 'app';

$borderRadius: 8px;

.wrapper {
  $offsetY: 200px;

  --offsetX: var(--grid-offset, 20px);
  --offsetY: 200px;

  width: app.grid-cols(6, calc(var(--offsetX) * -1));
  padding-bottom: var(--offsetY);
  margin: 0 calc(var(--offsetX) / -2) calc(var(--offsetY) / -2) 0;
  flex: none;
  position: relative;
  background-color: var(--editor-background-color);
  border-radius: $borderRadius;

  // &:before {
  //   content: '';
  //   position: absolute;
  //   top: 0;
  //   bottom: 0;
  //   left: 0;
  //   right: 0;
  //   z-index: -30;
  //   border-radius: $borderRadius;
  //   transform: translate(20px, 15px);
  //   background-color: rgba(#121820, 0.25);
  // }
}

/* --------------------------- */
/* Top Bar */

.top {
  display: flex;
  align-items: center;
  height: 50px;
  padding: 0 25px;
}

.dots {
  width: 9px;
  height: 9px;
  border-radius: 50%;
  background-color: currentColor;
  color: #525976;
  position: relative;
  flex: none;
  margin-left: 10px;

  &:before,
  &:after {
    content: '';
    background-color: currentColor;
    position: absolute;
    border-radius: 50%;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    flex-grow: 0;
  }

  $offset: 6px;

  &:before {
    transform: translateX(calc(-100% - #{$offset}));
  }

  &:after {
    transform: translateX(calc(100% + #{$offset}));
  }
}

.tabs {
  display: flex;
  align-items: center;
  align-self: stretch;
  margin-left: 35px;
}

.tabWrapper {
  font-family: var(--font-code);
  color: #616885;
  letter-spacing: 0.05em;
  padding: 0 18px 1px 18px;
  font-size: 13px;
  line-height: 1;
  display: inline-flex;
  height: 100%;
  align-items: center;
  cursor: pointer;
  transition: {
    property: color, background-color;
    duration: 0.2s;
  }

  &:hover,
  &.hover {
    background-color: #282d40;
    color: #7e86a0;

    svg {
      opacity: 1;
    }
  }

  &.active {
    background-color: #25293b !important;
    color: #fff !important;

    svg {
      mix-blend-mode: normal;
      opacity: 1;
    }
  }

  button {
    @include app.disable-native-button(true);
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;
    color: inherit;
    pointer-events: none;
    display: inline-flex;
    align-items: center;
  }

  svg {
    width: 1.15em;
    height: 1.15em;
    flex: none;
    margin-right: 5px;
    mix-blend-mode: luminosity;
    opacity: 0.6;
    transition: all 0.2s;

    // Safari seems to have issues animating mix-blend-mode
    @at-root .safari .tabWrapper:not(.active) svg {
      transition: none;
    }
  }
}

/* --------------------------- */
/* Code */

.code {
  font-family: var(--font-code);
  min-height: 312px;
  position: relative;
  overflow: hidden;
  contain: strict;
}

/* --------------------------- */
/* Terminal */

.terminal {
  background-color: #1b1e2b;
  border-bottom-left-radius: $borderRadius;
  border-bottom-right-radius: $borderRadius;
  height: 90px;
}

/* --------------------------- */
/* Mouse */

$clickPulseDuration: 420ms;
$doubleClickPulseDuration: 400ms;
$initialMouseX: 70%;
$initialMouseY: 30%;

.mouse {
  $size: 30px;
  $pulseOffset: 9px;
  $pulseOpacity: 0.25;

  position: absolute;
  width: $size;
  height: $size;
  border-radius: 50%;
  color: var(--green-accent-color);
  background-color: currentColor;
  z-index: 300;
  pointer-events: none;
  transition: opacity 0.2s;
  opacity: 0;
  will-change: transform, opacity;

  .pulse {
    position: absolute;
    top: -$pulseOffset;
    left: -$pulseOffset;
    right: -$pulseOffset;
    bottom: -$pulseOffset;
    color: inherit;
    background-color: currentColor;
    border-radius: 50%;
    opacity: $pulseOpacity;
    transform-origin: center center;
  }

  @keyframes pulseAnimation {
    0% {
      transform: scale(1);
      opacity: $pulseOpacity;
    }

    15% {
      opacity: $pulseOpacity;
    }

    45% {
      opacity: 0;
    }

    50% {
      transform: scale(1.5);
    }

    51% {
      transform: scale(0);
    }

    100% {
      transform: scale(1);
      opacity: $pulseOpacity;
    }
  }

  &:global(.click),
  &:global(.doubleClick) {
    .pulse {
      animation-name: pulseAnimation;
      animation-timing-function: linear;
    }
  }

  &:global(.click) {
    .pulse {
      animation-duration: $clickPulseDuration;
      animation-delay: 0.1s;
    }
  }

  &:global(.doubleClick) {
    .pulse {
      animation-iteration-count: 2;
      animation-duration: $doubleClickPulseDuration;
    }
  }
}

:export {
  clickPulseDuration: $clickPulseDuration;
  clickColor: app.$greenAccentDark;
  initialMouseX: $initialMouseX;
  initialMouseY: $initialMouseY;
}
